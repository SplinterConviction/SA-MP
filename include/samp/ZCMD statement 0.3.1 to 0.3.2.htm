<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!-- Generated by ExamDiff Pro build 8.0.1.0 -->
<!-- saved from url=(0014)about:internet -->

<head>
<title>ExamDiff Pro Diff Report</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<style type="text/css">
body{background-color: #fff; font-family: Lucida Console, monospace; font-size: 13px; font-style: normal; font-weight: 400;}
table td, table th {padding: 0;}

#container{padding: 2px; border: 1px solid #333; border-radius: 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px; -khtml-border-radius: 5px;}
.pane{float: left; margin: 2px;}
#navigation{width: 100%; table-layout: fixed;}
.button{width: 30px;}
.button input{width: 100%;}
#currentDiff{width: 100%;}
.title{margin-bottom: 4px; padding: 2px; overflow: hidden; background-color: #eee; border: 1px solid #333; font-family: "Segoe UI", Helvetica, Arial, Verdana, sans-serif; font-size: 12px;}
.file{overflow: scroll; border: 1px solid #333;}
.panes{border-spacing: 0;}
.content{width: 100%;}
.content div{min-width: 100%;}
.header{background-color: #C0C0C0; height: 12px; border-bottom: 1px solid #666;}
.diffBar{vertical-align: top; width: 6px; min-width: 6px; border-right: 1px solid #666; background-color: #eee;}
.diffs{position: relative;}
.diff{position: absolute; left: -3px; min-width: 9px; background-color: #c0c0c0; border-top: 1px solid #666; border-bottom: 1px solid #666; border-right: 1px solid #666; }
.diff.active{background-color: yellow;}
.nums{float: left;}
.num{display: block; height: 13px; text-align: right; padding-left: 2px; padding-right: 4px; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}
#legend{height: 13px; clear: both; padding-top: 3px; padding-bottom: 4px; border-bottom: 1px solid #ccc;}
#legend #numDiffs{float: left; margin-left: 3px;}
#legend #colors{float: right; margin-left: 1em; margin-right: 3px;}
#legend #colors div{float: left; margin-right: 1em;}
#inspector{clear: both; border: 1px solid black; margin: 6px 2px; position: relative; top: 2px; overflow: auto; }
#inspector .line {padding: 1px; padding-bottom: 2px;}
#inspector .left.line {border-bottom: 1px solid black;}
#inspector .content div {width: 100%;}
#generated_by {background: #F4F8FF; text-align: right; font-size: 10px; font-family: Arial; color: #888; padding-top: 1px;}
#generated_by a {color: #888;}

.li, .la, .ld, .lc, .ln, .lo, .lg, .lh{position: relative; height: 13px; white-space:pre;}
.lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb{position: absolute; bottom: 0px; height: 1px; border-bottom: 1px solid #000;}
.lbin{white-space: pre; color: #000000; background-color: #FFFFFF;}
.li, .si{color: #000000; background-color: #FFFFFF; text-decoration: none;}
.la, .sa{color: #800000; background-color: #C0C0C0; text-decoration: none;}
.ld, .sd{color: #0000FF; background-color: #E0E0E0; text-decoration: none;}
.lc, .sc{color: #402000; background-color: #F2F2C6; text-decoration: none;}
.ln, .sn{color: #800080; background-color: #A6CAF0; text-decoration: none;}
.lo, .so{color: #FF0000; background-color: #C0DCC0; text-decoration: none;}
.lg, .sig{color: #008000; background-color: #F0F0F0; text-decoration: none;}
.sc2{color: #FF0F87; background-color: #E0E0E0; text-decoration: none;}
.lh{font-weight: 700; color: #3A33BC; display: inline-block; position: relative; white-space: nowrap;}
.lh:before{position: absolute; display:block; top:0; left:0; bottom:0; content: attr(data-content); background-color:#FFF; color:#FFF; z-index:-1; padding-right:.5em;}
.lh:after{position:absolute; content:''; display: block; left:0; right:0; top:50%; background-color:#3A33BC; height:1px; min-height:1px; z-index:-2;}

.directory .content div{padding-left: 3px;}
.directory .content span{margin-right: 3px;}
.directory .l{width: 2624px;}

.s1-90{color:#0000FF;background-color:#FFFFFF;}
.s1-89{color:#008000;background-color:#FFFFFF;}
.s1-86{color:#0000FF;background-color:#FFFFFF;}
.s1-88{color:#000000;background-color:#FFFFFF;}
.s1-87{color:#000000;background-color:#FFFFFF;}
.s1-85{color:#A31515;background-color:#FFFFFF;}
.s1-100{color:#ACA899;background-color:#FFFFFF;}
.s2-90{color:#0000FF;background-color:#FFFFFF;}
.s2-89{color:#008000;background-color:#FFFFFF;}
.s2-86{color:#0000FF;background-color:#FFFFFF;}
.s2-88{color:#000000;background-color:#FFFFFF;}
.s2-87{color:#000000;background-color:#FFFFFF;}
.s2-85{color:#A31515;background-color:#FFFFFF;}
.s2-100{color:#ACA899;background-color:#FFFFFF;}
.num{color:#808080;background-color:#F8F8F8;border-right-width:2px;border-right-style:groove;border-right-color:#E0E0E0;}

</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js">
    
</script>

<script type="text/javascript">
    var $mode = 'text';
    var $orientation = 'vertical';
    var $useLineInspector = true;
    var $lineHeight = 13;
    var $lineWidth = 2624
    var $diffs = [
null,
{d:'Diff 1: Change 1 line (1, first file) to 1 line (1, second file)',l:[0,0]},
{d:'Diff 2: Change 1 line (4, first file) to 1 line (4, second file)',l:[3,3]},
{d:'Diff 3: Add 1 line (6, second file) after line 5 (first file)',l:[5,5]},
{d:'Diff 4: Change 1 line (7, first file) to 1 line (8, second file)',l:[7,7]},
{d:'Diff 5: Change 14 lines (14 - 27, first file) to 11 lines (15 - 25, second file)',l:[14,30]},
{d:'Diff 6: Change 2 lines (30 - 31, first file) to 1 line (28, second file)',l:[33,34]},
{d:'Diff 7: Change 8 lines (39 - 46, first file) to 3 lines (34 - 36, second file)',l:[42,49]},
{d:'Diff 8: Change 4 lines (60 - 63, first file) to 1 line (50, second file)',l:[63,66]},
{d:'Diff 9: Change 2 lines (66 - 67, first file) to 1 line (53, second file)',l:[69,70]},
{d:'Diff 10: Change 13 lines (81 - 93, first file) to 4 lines (69 - 72, second file)',l:[86,98]},
{d:'Diff 11: Change 6 lines (98 - 103, first file) to 2 lines (77 - 78, second file)',l:[103,108]},
{d:'Diff 12: Change 4 lines (106 - 109, first file) to 1 line (81, second file)',l:[111,114]},
{d:'Diff 13: Add 1 line (94, second file) after line 119 (first file)',l:[127,127]}
];

    try {
        $(document).ready(function() {
            $(window).bind('load resize', fitToWindow);

            populateDiffs();
            registerEventHandlers();

            if ($useLineInspector) {
                $('#inspector').show();
                setLineInspector(0);
            }

            $(window).load(function () {
                firstDiff();
            });
        });
    } catch (e) {
        alert('This diff report did not load correctly, most likely due to lack of an Internet connection.\n\nIf you wish for ExamDiff Pro diff reports to be viewed on computers without Internet access, make sure to check the "Enable offline report viewing" option under Options | HTML.');
    }

    function isIE7() {
        return ($.browser.msie && parseInt($.browser.version) < 8);
    }

    function fitToWindow() {
        var containerWidth = $(window).width() - 23;
        var containerHeight = $(window).height() - 115 - ($useLineInspector ? (2 * $lineHeight + 13) : 0) - (isIE7() ? 7 : 0);

        if ($orientation == 'vertical') {
            var paneWidth = (containerWidth / 2) - 6;
            var paneHeight = containerHeight;
        } else {
            var paneWidth = containerWidth - 6;
            var paneHeight = ((containerHeight - 13) / 2) - 10;
        }

        $('#container').width(containerWidth);
        $('.title').width(paneWidth - 4);
        $('.file').width(paneWidth).height(paneHeight);

        if ($orientation == 'vertical') {
            var titleHeightMax = $('#title1').height();
            if ($('#title2').height() > titleHeightMax)
                titleHeightMax = $('#title2').height();
            $('#title1').height(titleHeightMax);
            $('#title2').height(titleHeightMax);
        }
    }

    function populateDiffs() {
        if ($diffs.length > 1) {
            var lineHeight = $lineHeight;
            if ($.browser.mozilla && $mode == 'binary') {
                lineHeight += 1; // don't know why Firefox behaves differently
            }

            for (var i = 1; i < $diffs.length; i++) {
                $('#currentDiff').append($('<option></option>').attr('value', i).text($diffs[i].d));
                $('.diffs').append($('<div class="diff"></div>')
                                 .attr('title', $diffs[i].d)
                         .css('top', ($diffs[i].l[0] * lineHeight) + 'px')
                         .height((($diffs[i].l[1] - $diffs[i].l[0] + 1) * lineHeight) - 1));
                $('.d' + i).attr('title', $diffs[i].d);
            }

            if ($mode == 'directory') {
                $('.diffs').css('margin-top', (lineHeight - 1) + 'px');
            }

            if (!isIE7()) {
                $('.diffBar').show(); // IE7 and below can't handle the diff bars
            }
            else {
                $('.li, .la, .ld, .lc, .ln, .lo, .lg, .lib, .lab, .ldb, .lcb, .lnb, .lob, .lgb').css({ 'position': 'static' }); // IE7 and below can't handle 'relative'
            }
        } else {
            $('#currentDiff').append($('<option></option>').attr('value', 0).text('(No differences)'));
        }
    }

    function registerEventHandlers() {
        $('#currentDiff').bind('change keyup', function() {
            goto(currentDiff());
        });

        $('#file1').scroll(function() {
            synchScroll($('#file1'), $('#file2'));
        });
        $('#file2').scroll(function() {
            synchScroll($('#file2'), $('#file1'));
        });

        $('.file .l').click(function() {
            updateCurrentDiff(this);
            updateLineInspector(this);
        })

        $('#btnFirst').click(firstDiff);
        $('#btnPrevious').click(previousDiff);
        $('#btnNext').click(nextDiff);
        $('#btnLast').click(lastDiff);
    }

    function synchScroll(source, target) {
        target.scrollLeft(source.scrollLeft());
        target.scrollTop(source.scrollTop());
    }

    function goto(diff) {
        if (diff > 0 && diff <= $diffs.length) {
            markCurrentDiff(diff);
            setLineInspector($diffs[diff].l[0]);

            if ($('.comparison .diffBar').css('display') != 'none') {
                var block = $('.diff').eq(diff - 1);
                var tableMidpoint = $('.file').height() / 2;

                if (block.height() > $('.pane').height()) {
                    // Scroll to the top of the diff block
                    $('.file').scrollTop(block.position().top - $lineHeight);
                } else {
                    // Scroll so that diff block is centered
                    var midpoint = block.position().top + (block.height() / 2);
                    $('.file').scrollTop(midpoint - tableMidpoint);
                }
            } else {
                // If diff bar's not shown, just scroll first diff line to top
                var scrollPos = $('.d' + diff).first().position().top - $('.l').first().position().top;
                if ($mode == 'directory') {
                    scrollPos += $lineHeight; // to account for header
                }
                $('.file').scrollTop(scrollPos);
            }
        }
    }

    function markCurrentDiff(diff) {
        $('#currentDiff').val(diff);

        $('.diff').removeClass('active');
        $('.comparison .diffs').each(function(i, diffBar) {
            $(diffBar).children().eq(diff - 1).addClass('active');
        });
    }

    function updateCurrentDiff(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        markCurrentDiff(closestDiffToLine(lineNum));
    }

    function updateLineInspector(clickedDiv) {
        var lineNum = $(clickedDiv).parent().children('.l').index($(clickedDiv));
        setLineInspector(lineNum);
    }

    function setLineInspector(lineNum) {
        var leftLine = $($('#file1 .l').get(lineNum));
        var rightLine = $($('#file2 .l').get(lineNum));

        $('#inspectorLeftContent').html(leftLine.html())
        .attr('class', leftLine.attr('class'));
        $('#inspectorRightContent').html(rightLine.html())
        .attr('class', rightLine.attr('class'));

        if ($('.comparison .num').size() > 0) {
            var leftNum = $($('#file1 .num').get(lineNum));
            var rightNum = $($('#file2 .num').get(lineNum));
            var maxWidth = Math.max(leftNum.width(), rightNum.width());

            $('#inspector .left .num').html(leftNum.html())
            .width(maxWidth);
            $('#inspector .right .num').html(rightNum.html())
            .width(maxWidth);
        } else {
            $('#inspector .num').html('')
            .css('width', 0).css('border', 0).css('padding', 0);
        }
    }

    function closestDiffToLine(num) {
        var closest = {
            diff: null,
            dist: Infinity
        };

        for (var i = 1; i < $diffs.length; i++) {
            if ($diffs[i].l[0] <= num && $diffs[i].l[1] >= num) {
                closest = { diff: i, dist: 0 };
            } else {
                var dist = ($diffs[i].l[0] <= num) ? (num - $diffs[i].l[1]) : ($diffs[i].l[0] - num);
                if (dist <= closest.dist) {
                    closest = { diff: i, dist: dist };
                }
            }
        }

        return closest.diff;
    }

    function currentDiff() {
        return parseInt($('#currentDiff').val());
    }

    function firstDiff() {
        goto(1);
    }

    function previousDiff() {
        var diff = currentDiff();
        if (diff > 1) {
            diff--;
        }
        goto(diff);
    }

    function nextDiff() {
        var diff = currentDiff();
        if (diff < ($diffs.length - 1)) {
            diff++;
        }
        goto(diff);
    }

    function lastDiff() {
        goto($diffs.length - 1);
    }
</script>
</head>

<body>
<div id="container" style="">
    <!-- $JS_ONLY_BEGIN$ -->
        <table id="navigation">
            <tr>
                <td class="button"><input type="button" id="btnFirst" value="<<" title="First Difference"/></td>
                <td class="button"><input type="button" id="btnPrevious" value="<" title="Previous Difference"/></td>
                <td class="button"><input type="button" id="btnNext" value=">" title="Next Difference"/></td>
                <td class="button"><input type="button" id="btnLast" value=">>" title="Last Difference"/></td>
                <td>
                    <select id="currentDiff" size="1"></select>
                </td>
            </tr>
        </table>
    <!-- $JS_ONLY_END$ -->

    <div class="text comparison">
        <div class="pane">
            <div id="title1" class="title" style="width:px;" title="[Text Fragment 1]"><b>[Text Fragment 1]</b></div>
            <div id="file1" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num">  1 </div>
<div class="num">  2 </div>
<div class="num">  3 </div>
<div class="num">  4 </div>
<div class="num">  5 </div>
<div class="num">    </div>
<div class="num">  6 </div>
<div class="num">  7 </div>
<div class="num">  8 </div>
<div class="num">  9 </div>
<div class="num"> 10 </div>
<div class="num"> 11 </div>
<div class="num"> 12 </div>
<div class="num"> 13 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num"> 14 </div>
<div class="num"> 15 </div>
<div class="num"> 16 </div>
<div class="num"> 17 </div>
<div class="num"> 18 </div>
<div class="num"> 19 </div>
<div class="num"> 20 </div>
<div class="num"> 21 </div>
<div class="num"> 22 </div>
<div class="num"> 23 </div>
<div class="num"> 24 </div>
<div class="num"> 25 </div>
<div class="num"> 26 </div>
<div class="num"> 27 </div>
<div class="num"> 28 </div>
<div class="num"> 29 </div>
<div class="num"> 30 </div>
<div class="num"> 31 </div>
<div class="num"> 32 </div>
<div class="num"> 33 </div>
<div class="num"> 34 </div>
<div class="num"> 35 </div>
<div class="num"> 36 </div>
<div class="num"> 37 </div>
<div class="num"> 38 </div>
<div class="num"> 39 </div>
<div class="num"> 40 </div>
<div class="num"> 41 </div>
<div class="num"> 42 </div>
<div class="num"> 43 </div>
<div class="num"> 44 </div>
<div class="num"> 45 </div>
<div class="num"> 46 </div>
<div class="num"> 47 </div>
<div class="num"> 48 </div>
<div class="num"> 49 </div>
<div class="num"> 50 </div>
<div class="num"> 51 </div>
<div class="num"> 52 </div>
<div class="num"> 53 </div>
<div class="num"> 54 </div>
<div class="num"> 55 </div>
<div class="num"> 56 </div>
<div class="num"> 57 </div>
<div class="num"> 58 </div>
<div class="num"> 59 </div>
<div class="num"> 60 </div>
<div class="num"> 61 </div>
<div class="num"> 62 </div>
<div class="num"> 63 </div>
<div class="num"> 64 </div>
<div class="num"> 65 </div>
<div class="num"> 66 </div>
<div class="num"> 67 </div>
<div class="num"> 68 </div>
<div class="num"> 69 </div>
<div class="num"> 70 </div>
<div class="num"> 71 </div>
<div class="num"> 72 </div>
<div class="num"> 73 </div>
<div class="num"> 74 </div>
<div class="num"> 75 </div>
<div class="num"> 76 </div>
<div class="num"> 77 </div>
<div class="num"> 78 </div>
<div class="num"> 79 </div>
<div class="num"> 80 </div>
<div class="num">    </div>
<div class="num">    </div>
<div class="num"> 81 </div>
<div class="num"> 82 </div>
<div class="num"> 83 </div>
<div class="num"> 84 </div>
<div class="num"> 85 </div>
<div class="num"> 86 </div>
<div class="num"> 87 </div>
<div class="num"> 88 </div>
<div class="num"> 89 </div>
<div class="num"> 90 </div>
<div class="num"> 91 </div>
<div class="num"> 92 </div>
<div class="num"> 93 </div>
<div class="num"> 94 </div>
<div class="num"> 95 </div>
<div class="num"> 96 </div>
<div class="num"> 97 </div>
<div class="num"> 98 </div>
<div class="num"> 99 </div>
<div class="num">100 </div>
<div class="num">101 </div>
<div class="num">102 </div>
<div class="num">103 </div>
<div class="num">104 </div>
<div class="num">105 </div>
<div class="num">106 </div>
<div class="num">107 </div>
<div class="num">108 </div>
<div class="num">109 </div>
<div class="num">    </div>
<div class="num">110 </div>
<div class="num">111 </div>
<div class="num">112 </div>
<div class="num">113 </div>
<div class="num">114 </div>
<div class="num">115 </div>
<div class="num">116 </div>
<div class="num">117 </div>
<div class="num">118 </div>
<div class="num">119 </div>
<div class="num">    </div>
<div class="num">    </div>

                        </td>
                        <td class="content">
                            <div class="l lc d1"><span class="sc">/**********************************</span></div>
<div class="l li"><span class="si"> *                                *</span></div>
<div class="l li"><span class="si"> *   @Author:      ZeeX           *</span></div>
<div class="l lc d2"><span class="sc"> *   @Version:     0.3.</span><span class="sc2">1</span><span class="sc">          *</span></div>
<div class="l li"><span class="si"> *   @Released:    31/10/2009     *</span></div>
<div class="l la d3"> </div>
<div class="l li"><span class="si"> *                                *</span></div>
<div class="l lc d4"><span class="sc"> **********************************/</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _zcmd_included</span></div>
<div class="l li"><span class="si">    #endinput</span></div>
<div class="l li"><span class="si">#endif  </span></div>
<div class="l li"><span class="si">#define _zcmd_included</span></div>
<div class="l li"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"><span class="sc">#define MAX_FUNC_NAME </span><span class="sd">(</span><span class="sc">32</span><span class="sd">)</span></div>
<div class="l lg d5"> </div>
<div class="l lc d5"><span class="sc">#define </span><span class="sc2">COMMAND:</span><span class="sd">%1(%2)          \</span></div>
<div class="l lc d5"><span class="sc">            </span><span class="sd">forward cmd_%1(%2); \</span></div>
<div class="l lc d5"><span class="sc">            public cmd_%1(%2)       </span></div>
<div class="l lg d5"><span class="sig">            </span></div>
<div class="l lc d5"><span class="sc">#define </span><span class="sc2">CMD</span><span class="sc">:%1(%2) </span><span class="sd">\</span></div>
<div class="l lc d5"><span class="sc">            COMMAND:%1(%2)</span></div>
<div class="l lg d5"> </div>
<div class="l lc d5"><span class="sd">#define command(%1,%2,%3) \</span></div>
<div class="l lc d5"><span class="sc">            </span><span class="sd">COMMAND:%1(%2, %3)</span><span class="sc">      </span></div>
<div class="l lg d5"><span class="sig">      </span></div>
<div class="l lc d5"><span class="sd">#define cmd(%1,%2,%3) \</span></div>
<div class="l lc d5"><span class="sc">            </span><span class="sd">COMMAND:%1(%2, %3)</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if !defined isnull</span></div>
<div class="l lc d6"><span class="sc">    </span><span class="sd">#define isnull(%1) \</span></div>
<div class="l lc d6"><span class="sc">                ((!(%1[0])) || (((%1[0]) == '\1') &amp;&amp; (!(%1[1]))))</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"> </div>
<div class="l lg"> </div>
<div class="l li"><span class="si">forward OnPlayerCommandReceived(playerid, cmdtext[]); </span></div>
<div class="l li"><span class="si">forward OnPlayerCommandPerformed(playerid, cmdtext[], success); </span></div>
<div class="l li"> </div>
<div class="l lg"> </div>
<div class="l lc d7"><span class="sc">static</span></div>
<div class="l lc d7"><span class="sc">    </span><span class="sd">bool:zcmd_g_HasOPCS = false,</span></div>
<div class="l lc d7"><span class="sc">    </span><span class="sd">bool:zcmd_g_HasOPCE = false;</span></div>
<div class="l lg d7"> </div>
<div class="l lc d7"><span class="sd">#if defined FILTERSCRIPT</span></div>
<div class="l lg d7"> </div>
<div class="l lc d7"><span class="sc">public OnFilterScriptInit()</span></div>
<div class="l lc d7"><span class="sd">{</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCS = funcidx(&quot;OnPlayerCommandReceived&quot;) != -1;</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCE = funcidx(&quot;OnPlayerCommandPerformed&quot;) != -1;</span></div>
<div class="l li"><span class="si">    return CallLocalFunction(&quot;zcmd_OnFilterScriptInit&quot;, &quot;&quot;);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">    #undef OnFilterScriptInit</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnFilterScriptInit zcmd_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">forward zcmd_OnFilterScriptInit();</span></div>
<div class="l li"> </div>
<div class="l lc d8"><span class="sd">#else /*not a filterscript*/</span></div>
<div class="l lg d8"> </div>
<div class="l lc d8"><span class="sc">public OnGameModeInit()</span></div>
<div class="l lc d8"><span class="sd">{</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCS = funcidx(&quot;OnPlayerCommandReceived&quot;) != -1;</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCE = funcidx(&quot;OnPlayerCommandPerformed&quot;) != -1;</span></div>
<div class="l lc d9"><span class="sc">    if (funcidx(&quot;zcmd_OnGameModeInit&quot;) != -1)</span></div>
<div class="l lc d9"><span class="sc">    </span><span class="sd">{</span></div>
<div class="l li"><span class="si">        return CallLocalFunction(&quot;zcmd_OnGameModeInit&quot;, &quot;&quot;);</span></div>
<div class="l li"><span class="si">    }   </span></div>
<div class="l li"><span class="si">    return 1;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnGameModeInit</span></div>
<div class="l li"><span class="si">    #undef OnGameModeInit</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnGameModeInit</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnGameModeInit zcmd_OnGameModeInit</span></div>
<div class="l li"><span class="si">forward zcmd_OnGameModeInit();</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l lc d10"><span class="sd">#endif /*if defined FILTERSCRIPT*/</span></div>
<div class="l lg d10"> </div>
<div class="l lc d10"><span class="sc">public OnPlayerCommandText(playerid, cmdtext[])</span></div>
<div class="l lc d10"><span class="sd">{</span></div>
<div class="l lc d10"><span class="sc">    if (zcmd_g_HasOPCS &amp;&amp; !CallLocalFunction(&quot;OnPlayerCommandReceived&quot;, &quot;is&quot;, playerid, cmdtext))</span></div>
<div class="l lc d10"><span class="sc">    </span><span class="sd">{</span></div>
<div class="l lc d10"><span class="sc">        </span><span class="sd">return 1;</span></div>
<div class="l lc d10"><span class="sc">    </span><span class="sd">}</span></div>
<div class="l lc d10"><span class="sc">    </span><span class="sd">new</span></div>
<div class="l lc d10"><span class="sc">        </span><span class="sd">pos,</span></div>
<div class="l lc d10"><span class="sc">        funcname[MAX_FUNC_NAME];</span></div>
<div class="l lc d10"><span class="sc">    while (cmdtext[++pos] &gt; ' ') </span></div>
<div class="l lc d10"><span class="sc">    </span><span class="sd">{</span></div>
<div class="l li"><span class="si">        funcname[pos-1] = tolower(cmdtext[pos]); </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    format(funcname, sizeof(funcname), &quot;cmd_%s&quot;, funcname);</span></div>
<div class="l li"><span class="si">    while (cmdtext[pos] == ' ') pos++;</span></div>
<div class="l lc d11"><span class="sc">    if (!cmdtext[pos])</span></div>
<div class="l lc d11"><span class="sc">    </span><span class="sd">{</span></div>
<div class="l lc d11"><span class="sc">        </span><span class="sd">if (zcmd_g_HasOPCE)</span></div>
<div class="l lc d11"><span class="sc">        </span><span class="sd">{</span></div>
<div class="l lc d11"><span class="sc">            return CallLocalFunction(&quot;OnPlayerCommandPerformed&quot;, &quot;isi&quot;, playerid, cmdtext, CallLocalFunction(funcname, &quot;is&quot;, playerid, &quot;\1&quot;));</span></div>
<div class="l lc d11"><span class="sc">        </span><span class="sd">}</span></div>
<div class="l li"><span class="si">        return CallLocalFunction(funcname, &quot;is&quot;, playerid, &quot;\1&quot;);   </span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lc d12"><span class="sc">    </span><span class="sd">if (zcmd_g_HasOPCE)</span></div>
<div class="l lc d12"><span class="sc">    </span><span class="sd">{</span></div>
<div class="l lc d12"><span class="sc">        return CallLocalFunction(&quot;OnPlayerCommandPerformed&quot;, &quot;isi&quot;, playerid, cmdtext, CallLocalFunction(funcname, &quot;is&quot;, playerid, cmdtext[pos]));</span></div>
<div class="l lc d12"><span class="sc">    </span><span class="sd">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">    return CallLocalFunction(funcname, &quot;is&quot;, playerid, cmdtext[pos]);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">    #undef OnPlayerCommandText</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnPlayerCommandText zcmd_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">forward zcmd_OnPlayerCommandText(playerid, cmdtext[]);</span></div>
<div class="l li"> </div>
<div class="l la d13"> </div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="pane">
            <div id="title2" class="title" style="width:px;" title="[Text Fragment 2]"><b>[Text Fragment 2]</b></div>
            <div id="file2" class="file" style=" ">
                <table class="panes">
                    <tr>
                        <td class="diffBar" style="display: none;">
                            <div class="diffs"></div>
                        </td>
                        <td class="nums">
                            <div class="num"> 1 </div>
<div class="num"> 2 </div>
<div class="num"> 3 </div>
<div class="num"> 4 </div>
<div class="num"> 5 </div>
<div class="num"> 6 </div>
<div class="num"> 7 </div>
<div class="num"> 8 </div>
<div class="num"> 9 </div>
<div class="num">10 </div>
<div class="num">11 </div>
<div class="num">12 </div>
<div class="num">13 </div>
<div class="num">14 </div>
<div class="num">15 </div>
<div class="num">16 </div>
<div class="num">17 </div>
<div class="num">18 </div>
<div class="num">19 </div>
<div class="num">20 </div>
<div class="num">21 </div>
<div class="num">22 </div>
<div class="num">23 </div>
<div class="num">24 </div>
<div class="num">25 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">26 </div>
<div class="num">27 </div>
<div class="num">   </div>
<div class="num">28 </div>
<div class="num">29 </div>
<div class="num">30 </div>
<div class="num">   </div>
<div class="num">31 </div>
<div class="num">32 </div>
<div class="num">33 </div>
<div class="num">   </div>
<div class="num">34 </div>
<div class="num">35 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">36 </div>
<div class="num">   </div>
<div class="num">37 </div>
<div class="num">38 </div>
<div class="num">39 </div>
<div class="num">40 </div>
<div class="num">41 </div>
<div class="num">42 </div>
<div class="num">43 </div>
<div class="num">44 </div>
<div class="num">45 </div>
<div class="num">46 </div>
<div class="num">47 </div>
<div class="num">48 </div>
<div class="num">49 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">50 </div>
<div class="num">   </div>
<div class="num">51 </div>
<div class="num">52 </div>
<div class="num">53 </div>
<div class="num">   </div>
<div class="num">54 </div>
<div class="num">55 </div>
<div class="num">56 </div>
<div class="num">57 </div>
<div class="num">58 </div>
<div class="num">59 </div>
<div class="num">60 </div>
<div class="num">61 </div>
<div class="num">62 </div>
<div class="num">63 </div>
<div class="num">64 </div>
<div class="num">65 </div>
<div class="num">66 </div>
<div class="num">67 </div>
<div class="num">68 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">69 </div>
<div class="num">   </div>
<div class="num">70 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">71 </div>
<div class="num">72 </div>
<div class="num">   </div>
<div class="num">73 </div>
<div class="num">74 </div>
<div class="num">75 </div>
<div class="num">76 </div>
<div class="num">77 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">78 </div>
<div class="num">   </div>
<div class="num">79 </div>
<div class="num">80 </div>
<div class="num">   </div>
<div class="num">   </div>
<div class="num">81 </div>
<div class="num">   </div>
<div class="num">82 </div>
<div class="num">83 </div>
<div class="num">84 </div>
<div class="num">85 </div>
<div class="num">86 </div>
<div class="num">87 </div>
<div class="num">88 </div>
<div class="num">89 </div>
<div class="num">90 </div>
<div class="num">91 </div>
<div class="num">92 </div>
<div class="num">93 </div>
<div class="num">94 </div>

                        </td>
                        <td class="content">
                            <div class="l lc d1"><span class="sc">/**********************************</span><span class="sa">************</span></div>
<div class="l li"><span class="si"> *                                            *</span></div>
<div class="l li"><span class="si"> *   @Author:    ZeeX                         *</span></div>
<div class="l lc d2"><span class="sc"> *   @Version:   0.3.</span><span class="sc2">2</span><span class="sc">                        *</span></div>
<div class="l li"><span class="si"> *   @Released:  31/10/2009                   *</span></div>
<div class="l la d3"><span class="sa"> *   @Updated:   17/06/2016 by Abyss Morgan   *</span></div>
<div class="l li"><span class="si"> *                                            *</span></div>
<div class="l lc d4"><span class="sc"> **********************************</span><span class="sa">************</span><span class="sc">/</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _zcmd_included</span></div>
<div class="l li"><span class="si">    #endinput</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define _zcmd_included</span></div>
<div class="l li"> </div>
<div class="l lc d5"><span class="sa">#define CMD_SUCCESS         1</span></div>
<div class="l lc d5"><span class="sa">#define CMD_FAILURE         0</span></div>
<div class="l lg d5"> </div>
<div class="l lc d5"><span class="sc">#define MAX_FUNC_NAME       32</span></div>
<div class="l lc d5"><span class="sa">#define MAX_CMD_NAME        27</span></div>
<div class="l lc d5"><span class="sc">#define </span><span class="sc2">MAX_BUFFER_LEN      128</span></div>
<div class="l lg d5"> </div>
<div class="l lc d5"><span class="sa">#define COMMAND:%1(%2)      forward cmd_%1(%2);</span><span class="sc"> public cmd_%1(%2)</span></div>
<div class="l lc d5"><span class="sa">#define CMD:%1(%2)          COMMAND:%1(%2)</span></div>
<div class="l lc d5"><span class="sc">#define </span><span class="sc2">command</span><span class="sa">(%1,%2,%3)   COMMAND</span><span class="sc">:%1(%2</span><span class="sa">, %3</span><span class="sc">)</span></div>
<div class="l lc d5"><span class="sa">#define cmd(%1,%2,%3)</span><span class="sc">       COMMAND:%1(%2</span><span class="sa">, %3</span><span class="sc">)</span></div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l lc d5"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if !defined isnull</span></div>
<div class="l lc d6"> </div>
<div class="l lc d6"><span class="sc">    </span><span class="sa">#define isnull(%1)</span><span class="sc">      ((!(%1[0])) || (((%1[0]) == '\1') &amp;&amp; (!(%1[1]))))</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l li"><span class="si">forward OnPlayerCommandReceived(playerid, cmdtext[]);</span></div>
<div class="l li"><span class="si">forward OnPlayerCommandPerformed(playerid, cmdtext[], success);</span></div>
<div class="l li"> </div>
<div class="l li"> </div>
<div class="l lc d7"><span class="sc">static </span><span class="sa">bool:zcmd_g_HasOPCS = false, bool:zcmd_g_HasOPCE = false;</span></div>
<div class="l lg d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"> </div>
<div class="l lc d7"><span class="sc">public OnFilterScriptInit()</span><span class="sa">{</span></div>
<div class="l lc d7"> </div>
<div class="l li"><span class="si">    zcmd_g_HasOPCS = funcidx(&quot;OnPlayerCommandReceived&quot;) != -1;</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCE = funcidx(&quot;OnPlayerCommandPerformed&quot;) != -1;</span></div>
<div class="l li"><span class="si">    return CallLocalFunction(&quot;zcmd_OnFilterScriptInit&quot;, &quot;&quot;);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">    #undef OnFilterScriptInit</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnFilterScriptInit zcmd_OnFilterScriptInit</span></div>
<div class="l li"><span class="si">forward zcmd_OnFilterScriptInit();</span></div>
<div class="l li"> </div>
<div class="l lc d8"> </div>
<div class="l lc d8"> </div>
<div class="l lc d8"><span class="sc">public OnGameModeInit()</span><span class="sa">{</span></div>
<div class="l lc d8"> </div>
<div class="l li"><span class="si">    zcmd_g_HasOPCS = funcidx(&quot;OnPlayerCommandReceived&quot;) != -1;</span></div>
<div class="l li"><span class="si">    zcmd_g_HasOPCE = funcidx(&quot;OnPlayerCommandPerformed&quot;) != -1;</span></div>
<div class="l lc d9"><span class="sc">    if(funcidx(&quot;zcmd_OnGameModeInit&quot;) != -1)</span><span class="sa">{</span></div>
<div class="l lc d9"> </div>
<div class="l li"><span class="si">        return CallLocalFunction(&quot;zcmd_OnGameModeInit&quot;, &quot;&quot;);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    return 1;</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnGameModeInit</span></div>
<div class="l li"><span class="si">    #undef OnGameModeInit</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnGameModeInit</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnGameModeInit zcmd_OnGameModeInit</span></div>
<div class="l li"><span class="si">forward zcmd_OnGameModeInit();</span></div>
<div class="l li"> </div>
<div class="l lg"> </div>
<div class="l lg"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"><span class="sc">public OnPlayerCommandText(playerid, cmdtext[])</span><span class="sa">{</span></div>
<div class="l lc d10"> </div>
<div class="l lc d10"><span class="sc">    if(zcmd_g_HasOPCS &amp;&amp; !CallLocalFunction(&quot;OnPlayerCommandReceived&quot;, &quot;is&quot;, playerid, cmdtext)) </span><span class="sa">return 1;</span></div>
<div class="l lc d10"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"> </div>
<div class="l lc d10"><span class="sc">    </span><span class="sa">new pos,</span><span class="sc"> funcname[MAX_FUNC_NAME];</span></div>
<div class="l lc d10"><span class="sc">    while(cmdtext[++pos] &gt; ' ' </span><span class="sa">&amp;&amp; pos &lt; MAX_FUNC_NAME-4</span><span class="sc">)</span><span class="sa">{</span></div>
<div class="l lc d10"> </div>
<div class="l li"><span class="si">        funcname[pos-1] = tolower(cmdtext[pos]);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l li"><span class="si">    format(funcname, sizeof(funcname), &quot;cmd_%s&quot;, funcname);</span></div>
<div class="l li"><span class="si">    while(cmdtext[pos] == ' ') pos++;</span></div>
<div class="l lc d11"><span class="sc">    if(!cmdtext[pos])</span><span class="sa">{</span></div>
<div class="l lc d11"> </div>
<div class="l lc d11"> </div>
<div class="l lc d11"> </div>
<div class="l lc d11"><span class="sc">        </span><span class="sa">if(zcmd_g_HasOPCE)</span><span class="sc"> return CallLocalFunction(&quot;OnPlayerCommandPerformed&quot;, &quot;isi&quot;, playerid, cmdtext, CallLocalFunction(funcname, &quot;is&quot;, playerid, &quot;\1&quot;));</span></div>
<div class="l lc d11"> </div>
<div class="l li"><span class="si">        return CallLocalFunction(funcname, &quot;is&quot;, playerid, &quot;\1&quot;);</span></div>
<div class="l li"><span class="si">    }</span></div>
<div class="l lc d12"> </div>
<div class="l lc d12"> </div>
<div class="l lc d12"><span class="sc">    </span><span class="sa">if(zcmd_g_HasOPCE)</span><span class="sc"> return CallLocalFunction(&quot;OnPlayerCommandPerformed&quot;, &quot;isi&quot;, playerid, cmdtext, CallLocalFunction(funcname, &quot;is&quot;, playerid, cmdtext[pos]));</span></div>
<div class="l lc d12"> </div>
<div class="l lg"> </div>
<div class="l li"><span class="si">    return CallLocalFunction(funcname, &quot;is&quot;, playerid, cmdtext[pos]);</span></div>
<div class="l li"><span class="si">}</span></div>
<div class="l li"> </div>
<div class="l li"><span class="si">#if defined _ALS_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">    #undef OnPlayerCommandText</span></div>
<div class="l li"><span class="si">#else</span></div>
<div class="l li"><span class="si">    #define _ALS_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">#endif</span></div>
<div class="l li"><span class="si">#define OnPlayerCommandText zcmd_OnPlayerCommandText</span></div>
<div class="l li"><span class="si">forward zcmd_OnPlayerCommandText(playerid, cmdtext[]);</span></div>
<div class="l lg"> </div>
<div class="l la d13"><span class="sa">//EOF</span></div>

                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div id="inspector" style="display: none;">
        <div class="left line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorLeftContent"></div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="right line">
            <table class="panes">
                <tr>
                    <td class="diffBar" style="display: none;"></td>
                    <td class="nums">
                        <div class="num"></div>
                    </td>
                    <td class="content">
                        <div id="inspectorRightContent"></div>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div id="legend">
        <div id="numDiffs"><b>13 differences</b>: 58 lines, 59 inline differences in 56 changed lines</div><div id="colors"><div class="sa" title="Added lines: 2, inline additions in changed lines: 24">Added(2,24)</div><div class="sd" title="Deleted lines: 0, inline deletions in changed lines: 32">Deleted(0,32)</div><div class="sc" title="Changed lines: 56">Changed(56)</div><div class="sc2" title="Inline changes in changed lines: 3">Changed in changed(3)</div><div class="sig" title="Ignored lines and line parts">Ignored</div></div>
    </div>

    <div id="generated_by">
        Generated on June 20, 2016, 12:23 PM by <a href="http://www.prestosoft.com/edp_examdiffpro.asp?ref=diffreport" target="_blank">ExamDiff Pro</a> 8.0.1.0.
    </div>
</div>
</body>

</html>

